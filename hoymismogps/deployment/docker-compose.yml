version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    volumes:
      - ../backend:/app
      - backend_logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (for development)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # GPS Simulator
  gps_simulator:
    build:
      context: ../data-simulators
      dockerfile: Dockerfile
    environment:
      - BACKEND_URL=http://backend:8000
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    volumes:
      - ../data-simulators:/app
      - simulator_data:/app/data
    depends_on:
      - backend
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build:
      context: ../monitoring
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      - METRICS_DB_PATH=/data/metrics.db
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - monitoring_data:/data
      - ../monitoring:/app
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hoymismogps
      - POSTGRES_USER=${POSTGRES_USER:-hoymismo}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hoymismo}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  backend_logs:
  simulator_data:
  monitoring_data:
  redis_data:
  postgres_data:
  nginx_logs:

networks:
  default:
    name: hoymismogps_network
